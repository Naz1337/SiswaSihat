# Cline Coding Rules for CampusCalm Android Project

## 1. Core Project Constraints & Principles

-   **Language:** All code MUST be written in **Java**. Do NOT provide or suggest any Kotlin code.
-   **User Interface (UI):** All UIs MUST be built using **XML layouts**. Do NOT provide or suggest any Jetpack Compose code.
-   **Architecture:** Adhere to a **simple Activity-based architecture**.
    -   All business logic, UI updates, and data handling should be contained directly within the `Activity` or `Fragment` classes.
    -   Do NOT implement or suggest complex architectural patterns like MVVM, MVP, MVI, or use components like `ViewModel`, Repositories, or Service layers.
-   **Dependencies:** Do NOT introduce new third-party libraries (e.g., Glide, Retrofit, Dagger/Hilt). We are only using the standard Android SDK, AndroidX libraries, and the pre-configured Firebase Firestore dependency.

## 2. Java Coding Conventions

-   **Naming Conventions:**
    -   **Activities:** `PascalCase` ending with `Activity` (e.g., `LoginActivity`, `DashboardActivity`).
    -   **Fragments:** `PascalCase` ending with `Fragment` (e.g., `AnxietyQuizFragment`).
    -   **Layout Files:** `snake_case` prefixed with component type (e.g., `activity_login.xml`, `fragment_anxiety_quiz.xml`).
    -   **Variables & Methods:** `camelCase` (e.g., `userName`, `setupFirestoreListener()`).
    -   **Constants:** `UPPER_SNAKE_CASE` (e.g., `public static final String COLLECTION_USERS = "users";`).
    -   **XML View IDs:** `camelCase` prefixed with widget type (e.g., `id="@+id/editTextUsername"`, `id="@+id/buttonLogin"`, `id="@+id/recyclerViewChat"`). This is crucial for clarity.
-   **Code Structure:**
    -   Define a `TAG` for logging in each Activity: `private static final String TAG = "LoginActivity";`.
    -   Initialize all UI views in a dedicated method called `initViews()` which is called from `onCreate()`.
    -   Initialize all listeners in a dedicated method called `initListeners()` which is called from `onCreate()`.
-   **Comments:** Use `//` for single-line comments and `/** ... */` for method-level Javadoc-style comments explaining what a method does, its parameters, and what it returns.

## 3. XML Layout & Resource Guidelines

-   **Layouts:** Use `ConstraintLayout` as the default root layout for its flexibility. Use `LinearLayout` or `RelativeLayout` for simpler, nested view groups.
-   **Hardcoded Strings:** **Strictly forbidden.** All user-facing text MUST be defined in `res/values/strings.xml`.
-   **Dimensions & Colors:** All dimensions (margins, padding, text sizes) MUST be defined in `res/values/dimens.xml`. All color codes MUST be defined in `res/values/colors.xml`.
-   **Example `strings.xml` entry:**
    ```xml
    <string name="login_button_text">Log In</string>
    ```
-   **Example `dimens.xml` entry:**
    ```xml
    <dimen name="default_margin">16dp</dimen>
    ```

## 4. Firebase Firestore Interaction Rules

-   **Authentication:** We are **NOT using Firebase Authentication**.
    -   **Registration:** To register a user, create a new document in the `users` collection with plaintext `username` and `password` fields.
    -   **Login:** To log a user in, query the `users` collection to find a document where the `username` and `password` fields match the user's input.
-   **Firestore Instance:** Get the Firestore instance like this: `FirebaseFirestore db = FirebaseFirestore.getInstance();`.
-   **Data Models:** Data should be stored and retrieved using `java.util.Map<String, Object>` or custom Plain Old Java Objects (POJOs).
-   **Collection & Document Structure:**
    -   `users`
        -   Document ID: Auto-generated
        -   Fields: `{ username: "string", password: "string" }`
    -   `planner_events`
        -   Document ID: Auto-generated
        -   Fields: `{ userId: "string", title: "string", description: "string", date: "timestamp" }`
        -   *Note: `userId` will be the username of the logged-in user.*
    -   `mood_logs`
        -   Document ID: Auto-generated
        -   Fields: `{ userId: "string", mood: "number", stress: "number", journal: "string", timestamp: "timestamp" }`
    -   `chat_messages` (Anonymous)
        -   Document ID: Auto-generated
        -   Fields: `{ message: "string", timestamp: "timestamp" }`
-   **Asynchronous Operations:**
    -   Always handle asynchronous calls correctly using `.addOnSuccessListener()` and `.addOnFailureListener()`.
    -   Provide user feedback for operations (e.g., a `Toast` message: "Event saved!" or "Error: Could not save event").
    -   Use `Log.e(TAG, "Error message", exception);` inside `onFailure` listeners.
-   **Real-time Updates:** For the Anonymous Chatroom, use `addSnapshotListener()` to listen for real-time changes to the `chat_messages` collection.

## 5. Android Component Usage

-   **Intents:**
    -   Use **Explicit Intents** to navigate between activities within our app. Always pass necessary data (like the logged-in username) via `intent.putExtra()`.
      ```java
      // Example
      Intent intent = new Intent(LoginActivity.this, DashboardActivity.class);
      intent.putExtra("USERNAME", username);
      startActivity(intent);
      ```
    -   Use **Implicit Intents** to interact with other apps (e.g., `ACTION_DIAL` for the SOS hotline, `ACTION_VIEW` with a geo URI for Maps).
-   **Sensors:** When implementing a sensor, correctly register and unregister the `SensorEventListener` in the `onResume()` and `onPause()` lifecycle methods, respectively, to conserve battery.
-   **Permissions:** For sensors like GPS/Location, ensure the app requests the necessary permissions in `AndroidManifest.xml` and implements runtime permission checks for Android 6.0 (API 23) and above.

